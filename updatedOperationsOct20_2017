
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.concurrent.Delayed;

/**
 * Created by sky on 16/10/17.
 * HELLO BUDDY.
 * people die if they are killed.
 * aakashjaiswal@hotmail.co.in
 * aakashjaiswal.connect@gmail.com
 * www.github.com/aakashjaiswal1
 * you need to hate college to be able to
 * succeed in life.
 * college programming sucks so i am here.
 * :D
 * college-MUJ-
 * year-just a no 2ND BTW.
 */
public class BINARYTREE {
    public static class BinaryTreeNode {
        public int data;
        public BinaryTreeNode left, right;

        public BinaryTreeNode(int data) {
            this.left = null;
            this.right = null;
            this.data = data;
        }

        public int data() {
            return data;
        }

        public void setData(int data) {
            this.data = data;
        }

        public BinaryTreeNode getLeft() {
            return this.left;
        }

        public BinaryTreeNode getRight() {
            return this.right;
        }

        public void setLeft(BinaryTreeNode node) {
            this.left = node;
        }

        public void setRight(BinaryTreeNode node) {
            this.right = node;
        }

        public ArrayList<Integer> perOrderI(BinaryTreeNode root) {
            ArrayList<Integer> res = new ArrayList<>();
            if (root == null)
                return res;
            Stack<BinaryTreeNode> s = new Stack<>();
            s.push(root);
            while (!s.isEmpty()) {
                BinaryTreeNode cc = s.pop();
                res.add(cc.data);
                if (cc.right != null)
                    s.add(cc.right);

                if (cc.left != null)
                    s.add(cc.left);
            }
            return res;
        }

        public ArrayList<Integer> inOrderI(BinaryTreeNode root) {
            ArrayList<Integer> res = new ArrayList<>();
            Stack<BinaryTreeNode> s = new Stack<>();
            BinaryTreeNode currentNode = root;
            boolean done = false;
            while (!done) {
                if (currentNode != null) {
                    s.push(currentNode);
                    currentNode = currentNode.left;
                } else {
                    if (s.isEmpty()) {
                        done = true;
                    } else {
                        currentNode = s.pop();
                        res.add(currentNode.data);
                        currentNode = currentNode.right;
                    }
                }
            }
            return res;
        }

        public ArrayList<Integer> postOrderI(BinaryTreeNode root) {
            ArrayList<Integer> res = new ArrayList<>();
            if (root == null) {
                return res;
            }
            Stack<BinaryTreeNode> s = new Stack<>();
            s.push(root);
            BinaryTreeNode prev = null;
            while (!s.isEmpty()) {
                BinaryTreeNode curr = s.peek();
                if (prev == null || prev.left == curr || prev.right == curr) {
                    if (curr.left != null)
                        s.push(curr.left);
                    if (curr.right != null)
                        s.push(curr.right);
                } else if (curr.left == prev) {
                    if (curr.right != null)
                        s.push(curr.right);
                } else {
                    res.add(curr.data);
                    s.pop();
                }
                prev = curr;
            }
            return res;
        }

        public ArrayList<ArrayList<Integer>> levelOrder(BinaryTreeNode root) {
            ArrayList<ArrayList<Integer>> res = new ArrayList<>();
            if (root == null)
                return res;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            q.offer(null);
            ArrayList<Integer> curr = new ArrayList<>();
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp != null) {
                    curr.add(tmp.data);
                    if (tmp.left != null)
                        q.offer(tmp.left);
                    if (tmp.right != null)
                        q.offer(tmp.right);
                } else {
                    ArrayList<Integer> c_curr = new ArrayList<>(curr);
                    res.add(c_curr);
                    curr.clear();
                    if (!q.isEmpty())
                        q.offer(null);
                }
            }
            return res;
        }

        public ArrayList<ArrayList<Integer>> levelOrderI(BinaryTreeNode root) {
            ArrayList<ArrayList<Integer>> res = new ArrayList<>();
            if (root == null)
                return res;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            q.offer(null);
            ArrayList<Integer> curr = new ArrayList<>();
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp != null) {
                    curr.add(tmp.data);
                    if (tmp.left != null)
                        q.offer(tmp.left);
                    if (tmp.right != null)
                        q.offer(tmp.right);
                } else {
                    ArrayList<Integer> c_curr = new ArrayList<>(curr);
                    res.add(c_curr);
                    curr.clear();
                    if (!q.isEmpty())
                        q.offer(null);
                }
            }
            return res;
        }

        public ArrayList<ArrayList<Integer>> levelOrdern(BinaryTreeNode root) {
            ArrayList<ArrayList<Integer>> res = new ArrayList<>();
            if (root == null)
                return res;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            q.offer(null);
            ArrayList<Integer> curr = new ArrayList<>();
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp != null) {
                    curr.add(tmp.data);
                    if (tmp.left != null)
                        q.add(tmp.left);
                    if (tmp.right != null)
                        q.add(tmp.right);
                } else {
                    ArrayList<Integer> c_curr = new ArrayList<>(curr);
                    curr.clear();
                    res.add(c_curr);
                    if (!q.isEmpty())
                        q.add(null);
                }
            }
            return res;
        }

        ////////~~~~~~~~~~~~~~`
        public ArrayList<Integer> preorderI(BinaryTreeNode root) {
            ArrayList<Integer> res = new ArrayList<>();
            if (root == null)
                return res;
            Stack<BinaryTreeNode> s = new Stack<>();
            s.push(root);
            while (!s.isEmpty()) {
                BinaryTreeNode tmp = s.pop();
                res.add(tmp.data);
                if (tmp.right != null)
                    s.push(tmp.right);
                if (tmp.left != null)
                    s.push(tmp.left);
            }
            return res;
        }

        public ArrayList<Integer> inorerI(BinaryTreeNode root) {
            ArrayList<Integer> res = new ArrayList<>();
            boolean done = false;
            BinaryTreeNode currentnode = root;
            Stack<BinaryTreeNode> s = new Stack<>();
            while (!done) {
                if (currentnode != null) {
                    s.push(currentnode);
                    currentnode = currentnode.left;
                } else {
                    if (s.isEmpty())
                        done = true;
                    else {
                        currentnode = s.pop();
                        res.add(currentnode.data);
                        currentnode = currentnode.right;
                    }
                }
            }
            return res;
        }

        public ArrayList<Integer> postorderI(BinaryTreeNode root) {
            ArrayList<Integer> res = new ArrayList<>();
            if (root == null)
                return res;
            Stack<BinaryTreeNode> s = new Stack<>();
            BinaryTreeNode prev = null;
            s.push(root);
            while (!s.isEmpty()) {
                BinaryTreeNode curr = s.peek();
                if (prev == null || prev.left == curr || prev.right == curr) {
                    if (curr.left != null)
                        s.push(curr.left);
                    else if (curr.right != null)
                        s.push(curr.right);
                } else {
                    if (curr.left == prev) {
                        s.add(curr.right);
                    } else {
                        res.add(curr.data);
                        s.pop();
                    }

                }
                prev = curr;
            }
            return res;
        }

        public ArrayList<ArrayList<Integer>> levelorder(BinaryTreeNode root) {
            ArrayList<ArrayList<Integer>> res = new ArrayList<>();
            if (root == null)
                return res;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            q.offer(null);
            ArrayList<Integer> curr = new ArrayList<>();
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp != null) {
                    curr.add(tmp.data);
                    if (tmp.left != null)
                        q.offer(tmp.left);
                    if (tmp.right != null)
                        q.offer(tmp.right);
                } else {
                    ArrayList<Integer> c_curr = new ArrayList<>(curr);
                    curr.clear();
                    res.add(c_curr);
                    if (!q.isEmpty()) {
                        q.offer(null);
                    }
                }
            }
            return res;
        }


        //////////~~~~~~~~~~~~~~~

        //q1>fnd max element in a binary tree

        //a1
        //approach 1 using recursion
        public int max(BinaryTreeNode root) {
            int MaxVal = Integer.MIN_VALUE;
            if (root != null) {
                int left_max = max(root.left);
                int right_max = max(root.right);
                if (left_max > right_max)
                    MaxVal = left_max;
                else
                    MaxVal = right_max;
                if (root.data > MaxVal)
                    MaxVal = root.data;
            }
            return MaxVal;
        }

        //q2  write an iterative code for the above logic
        public int maxInBinaryTreeLevelOrder(BinaryTreeNode root) {
            if (root == null)
                return Integer.MIN_VALUE;
            int max = Integer.MIN_VALUE;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp.data > max) {
                    max = tmp.data;
                }

                if (tmp.getLeft() != null)
                    q.offer(tmp.getLeft());
                if (tmp.getRight() != null)
                    q.offer(tmp.getRight());
            }
            return max;
        }
        //q3 give an algo to search an element in an binary tree

        public static boolean findintBT(BinaryTreeNode root, int data) {
            if (root == null)
                return false;
            if (root.data == data)
                return true;
            return (findintBT(root.left, data) || (findintBT(root.right, data)));
        }

        //q4 give an algo for searching in an binary tree without recurtion
        public boolean FindinBT(BinaryTreeNode root, int data) {
            if (root == null)
                return false;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp.data == data) {
                    return true;
                }
                if (tmp != null) {
                    if (tmp.getLeft() != null)
                        q.offer(tmp.getLeft());
                    if (tmp.right != null)
                        q.offer(tmp.getRight());
                }
            }
            return false;
        }

        //q5 write an code to insert an element into a binary tree
        //level order only
        public BinaryTreeNode insertL(BinaryTreeNode root, int data) {
            if (root == null)
                return null;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp != null) {
                    if (tmp.left != null) {
                        q.offer(tmp.left);
                    } else {
                        tmp.left = new BinaryTreeNode(data);
                        return root;
                    }
                    if (tmp.right != null) {
                        q.offer(tmp.getRight());
                    } else {
                        tmp.right = new BinaryTreeNode(data);
                        return root;
                    }
                }
            }
            return root;
        }
        //q5 part B  write an recursive code to implement level order insertion

        public void insert(BinaryTreeNode root, int data) {
            if (root == null)
                root = new BinaryTreeNode(data);
            else {
                insertHelper(root, data);
            }
        }

        private void insertHelper(BinaryTreeNode root, int data) {
            if (root == null) {
                root = new BinaryTreeNode(data);
                return;
            }
            if (root.left == null) {
                root.left = new BinaryTreeNode(data);
            } else if (root.right == null) {
                root.right = new BinaryTreeNode(data);
                // insertHelper(root.right, data);
            } else {
                insert(root.left, data);
            }
        }

        //q6 write a code to find the size of binary tree
        //using recursion OK YO-YO
        public int size(BinaryTreeNode root) {
            int left_c = (root.left == null) ? 0 : size(root.left);
            int right_c = (root.right == null) ? 0 : size(root.right);
            return 1 + left_c + right_c;
        }

        //q7 solve with iteration
        public int sizeI(BinaryTreeNode root) {
            int count = 0;
            if (root == null)
                return 0;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                count++;
                if (tmp.getLeft() != null)
                    q.offer(tmp.left);
                if (tmp.getRight() != null)
                    q.offer(tmp.getRight());
            }
            return count;
        }

        //q8 wap to delete a node in a bt
        public void deleteBinaryTreeNode(BinaryTreeNode node) {
            node = null;
        }

        //program to print level order in reverse
        public ArrayList<ArrayList<Integer>> levelOrderR(BinaryTreeNode root) {
            ArrayList<ArrayList<Integer>> res = new ArrayList<>();
            if (root == null)
                return res;

            Queue<BinaryTreeNode> q = new LinkedList<>();
            ArrayList<Integer> curr = new ArrayList<>();
            q.offer(root);
            q.offer(null);
            while (!q.isEmpty()) {
                BinaryTreeNode tmp = q.poll();
                if (tmp != null) {
                    curr.add(tmp.data);
                    if (tmp.left != null) {
                        q.offer(tmp.left);
                    }
                    if (tmp.right != null) {
                        q.offer(tmp.right);
                    }
                } else {
                    ArrayList<Integer> c_curr = new ArrayList<>(curr);
                    curr.clear();
                    res.add(c_curr);
                    if (!q.isEmpty()) {
                        q.offer(null);
                    }
                }
            }
            Stack<ArrayList<Integer>> toRet = new Stack<>();
            for (int i = 0; i < res.size(); ++i) {
                toRet.push(res.get(i));
            }
            res.clear();
            while (!toRet.isEmpty()) {
                ArrayList<Integer> alnw = toRet.pop();
                res.add(alnw);
            }
            return res;
        }

        // give an algo to find height (or depth) of a binary tree
        public int maxDepth(BinaryTreeNode root) {
            if (root == null)
                return 0;
            int leftDepth = maxDepth(root.left);
            int rightDepth = maxDepth(root.right);
            return ((leftDepth > rightDepth) ? leftDepth + 1 : rightDepth + 1);
        }

        //q11 now find the depth of binary tree with stack
        public int maxDepthI(BinaryTreeNode root) {
            if (root == null)
                return 0;
            Stack<BinaryTreeNode> s = new Stack<>();
            s.push(root);
            int MaxDepth = 0;
            BinaryTreeNode prev = null;
            while (!s.isEmpty()) {
                BinaryTreeNode curr = s.peek();
                if (prev == null || prev.left == curr || prev.right == curr) {
                    if (curr.left != null)
                        s.push(curr.left);
                    else if (curr.right != null)
                        s.push(curr.right);

                } else
                    s.pop();

                if (s.size() > MaxDepth)
                    MaxDepth = s.size();

                prev = curr;
            }
            return MaxDepth;
        }

        //q12
        //can you find the depth without recursion
        //ans
        public int minDepth(BinaryTreeNode root) {
            if (root == null)
                return 0;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            q.offer(null);
            int count = 1;
            while (!q.isEmpty()) {
                BinaryTreeNode current_node = q.poll();
                if (current_node != null) {
                    if (current_node.left == null && current_node.right == null)
                        return count;
                    if (current_node.left != null)
                        q.offer(current_node.left);
                    if (current_node.right != null)
                        q.offer(current_node.right);

                } else {
                    if (!q.isEmpty()) {
                        count++;
                        q.offer(null);
                    }
                }
            }
            return count;
        }

        public int MaxDepthI(BinaryTreeNode root) {
            if (root == null)
                return 0;
            Stack<BinaryTreeNode> s = new Stack<>();
            s.push(root);
            int maxDepth = 0;
            BinaryTreeNode prev = null;
            while (!s.isEmpty()) {
                BinaryTreeNode curr = s.peek();
                if (prev == null || prev.left == curr || prev.right == curr) {
                    if (curr.left != null)
                        s.push(curr.left);
                    else if (curr.right != null)
                        s.push(curr.right);
                } else if (curr.left == prev) {
                    if (curr.right != null)
                        s.push(curr.right);

                } else {
                    s.pop();
                }
                prev = curr;
                if (s.size() > maxDepth)
                    maxDepth = s.size();
            }
            return maxDepth;
        }

        public int DepthusingQueue(BinaryTreeNode root) {
            if (root == null)
                return 0;
            Queue<BinaryTreeNode> q = new LinkedList<>();
            q.offer(root);
            q.offer(null);
            int count = 1;
            while (!q.isEmpty()) {
                BinaryTreeNode current_node = q.poll();
                if (current_node != null) {
                    if (current_node.left == null && current_node.right == null)
                       // return count;
                        continue;


                    if (current_node.left != null)
                        q.offer(current_node.left);
                    if (current_node.right != null)
                        q.offer(current_node.right);
                } else {
                    if (!q.isEmpty()) {
                        count++;
                        q.offer(null);
                    }
                }


            }
            return count;
        }
        //wap to find min depth of binary tree
        public int minDepthpr(BinaryTreeNode root){
            if (root==null)
                return 0;
            Queue<BinaryTreeNode> q=new LinkedList<>();
            q.offer(root);
            q.offer(null);
            int count=1;
            while (!q.isEmpty()) {
                BinaryTreeNode curr = q.poll();
                if (curr!=null){
                if (curr.left == null && curr.right == null) {
                    return count;
                }
                if (curr.left!=null)
                    q.offer(curr.left);
                if (curr.right!=null)
                    q.offer(curr.right);

            }else {
                    if (!q.isEmpty()){
                        count++;
                        q.offer(null);
                    }
                }
            }
            return count;
        }
        //q 14 wap to find deepest node in binary tree
        public BinaryTreeNode DeepestinBT(BinaryTreeNode root){
            BinaryTreeNode tmp=null;
            if (root==null)
                return null;
            Queue<BinaryTreeNode> q=new LinkedList<>();
            q.offer(root);
            while (!q.isEmpty()){
                tmp=q.poll();
                if (tmp.getLeft()!=null)
                    q.offer(tmp.left);
                if (tmp.getLeft()!=null)
                    q.offer(tmp.right);
            }
            return tmp;
        }

//        public BinaryTreeNode DeepestinBTDEL(BinaryTreeNode root) {
//            ArrayList<BinaryTreeNode> al = new ArrayList<>();
//            BinaryTreeNode tmp = null;
//            if (root == null)
//                return null;
//            Queue<BinaryTreeNode> q = new LinkedList<>();
//            q.offer(root);
//            while (!q.isEmpty()) {
//                tmp = q.poll();
//
//                if (tmp.getLeft() != null) {
//                    q.offer(tmp.left);
//                    if (tmp.left.left == null && tmp.left.right == null)
//                        al.add(tmp);
//                }
//                if (tmp.getRight() != null) {
//                    q.offer(tmp.right);
//                    if (tmp.right.left == null && tmp.right.right == null)
//                        al.add(tmp);
//                }
//            }
//            int data_to_be_removed = tmp.data;
//            for (int i = 0; i < al.size(); ++i) {
//                BinaryTreeNode parent_node = al.get(i);
//                if (parent_node.left != null) {
//                    if (parent_node.left.data == data_to_be_removed) {
//                        parent_node.left = null;
//                        break;
//                    }
//                    if ((parent_node.right!=null)&&(parent_node.right.data == data_to_be_removed)) {
//                        parent_node.right = null;
//                        break;
//                    }
//                }
//
//
//            }
//
//            return tmp;
//        }

        //q15 wap to delete an element from an binary tree
        //
//        public boolean deleteFromBT(BinaryTreeNode root,int data){
//
//            if (root==null)
//                return false;
//            BinaryTreeNode acquired=NodeFinder(root,data);
//            if (acquired==null)
//            return false;
//            BinaryTreeNode deepest_in_BT=acquired.DeepestinBT(root);
//            BinaryTreeNode deepest_in_BT2=acquired.DeepestinBTDEL(root);
//
//            acquired.data= deepest_in_BT.data;
//            return true;
//        }
//
//        private BinaryTreeNode NodeFinder(BinaryTreeNode root,int data){
//            if (root==null)
//                return null;
//            if (root.data==data)
//                return root;
//            BinaryTreeNode left=NodeFinder(root.left,data);
//            if (left!=null)
//                return left;
//            BinaryTreeNode Right=NodeFinder(root.right,data);
//            if (right!=null)
//                return right;
//            return null;
//        }
            //complete this function

//            public boolean deleteFromBT(BinaryTreeNode root,int data){
//
//                return false;
//            }

//            private boolean deleteLeafNode(BinaryTreeNode node,int data){
//                if (node.left!=null){
//                   boolean bl= deleteLeafNode(node.left,data);
//                   if (bl)
//                       return bl;
//                }
//                if (node.right!=null){
//                    boolean bl=deleteLeafNode(node.right,data);
//                    if (bl)
//                        return bl;
//                }
//                if (node.data==data)
//
//            }
            private int Delete_deepest_node(BinaryTreeNode root) throws Exception {
                if (root==null)
                    throw new Exception("input root cant be empty");
                    Queue<BinaryTreeNode> q=new LinkedList<>();
                    BinaryTreeNode last=null;
                    BinaryTreeNode parent=null;
                    q.offer(root);
                    while (!q.isEmpty()){
                        parent=last;
                        last=q.poll();
                        if (last.left!=null){
                            q.add(last.left);
                        }
                        if (last.right!=null){
                            q.add(last.right);
                        }
                    }
                    int deletion_data=last.data;
                    if (parent.left!=null){
                        if (parent.left.data==deletion_data) {
                            parent.left = null;
                            return deletion_data;
                        }
                    }
                    if (parent.right!=null){
                        if (parent.right.data==deletion_data){
                            parent.right=null;
                            return deletion_data;
                        }
                    }


                return deletion_data;
            }
//                    public boolean deleteFromBT(BinaryTreeNode root,int data){
//                        if (root==null)
//                            return false;
//                        if (root.data==data) {
//                            root.clone() =null;
//                            return true;
//                        }
//                        boolean left=deleteFromBT(root.left,data);
//                        if (left)
//                            return true;
//                        boolean right=deleteFromBT(root.right,data);
//                        if (right)
//                            return true;
//                        return false;
//                    }
        public boolean deleteFromBT(BinaryTreeNode node,int data) throws Exception {
            if (node.left==null&&node.right==null){
                //ignore exception it will never happen
                throw new Exception("node cant be leaf node itself");
            }
                int retData=DeletionHelper(node);
           boolean bl=  deletionHelper2(node,data,retData);
            return bl;
        }
        private boolean deletionHelper2(BinaryTreeNode node,int data,int setterData){
            if (node==null)
                return false;
            if (node.data==data){
                node.data=setterData;
                return true;
            }
            boolean bl1=deletionHelper2(node.left,data,setterData);
            if (bl1)
                return true;

            boolean bl11=deletionHelper2(node.right,data,setterData);

                return bl11;

        }
        //you can also pass another argument to check if the integer returning is not equal to the removal data itself
        //this is just a slight bug in my code
        // AS WITH GREAT POWER COMES GREAT responsibility .
        // :D
        // below is most tough part of this binary tree code
        private int DeletionHelper(BinaryTreeNode root) {
            if (root.left != null) {
                if (root.left.left == null && root.left.right == null) {
                    int data = root.left.data;
                    root.left = null;
                    return data;
                }
            }
            if (root.right!=null){
            if (root.right.left == null && root.right.right == null) {
                int data = root.right.data;
                root.right = null;
                return data;
            }
        }
        int x=DeletionHelper(root.left);
            if (x!=Integer.MIN_VALUE)
                return x;
            x=DeletionHelper(root.right);
            if (x!=Integer.MIN_VALUE)
                return x;

            return Integer.MIN_VALUE;
        }
        //q19 check if two binary trees are structurally identical
        public boolean checkSI(BinaryTreeNode root1,BinaryTreeNode root2){
            if (root1==null&&root2==null)
                return true;
            if (root1==null||root2==null)
                return false;
            return (checkSI(root1.left,root2.right)&&checkSI(root1.right,root2.left));
        }
        //q 20 wap to calculate the diameter of binary tree

       public int diameter(BinaryTreeNode root){
           if (root==null)
               return 0;
           int len1=height(root.left)+height(root.right)+1;

           int len2=Math.max(diameter(root.left),diameter(root.right));
           return Math.max(len1,len2);
       }
       public int height(BinaryTreeNode root){
           if (root==null)
               return 0;
           int leftDepth=height(root.left);
           int rightDepth=height(root.right);
           return leftDepth>rightDepth?leftDepth+1:rightDepth+1;
       }
            //q21 wap to find the width of a binary tree
        //sol
        public int width(BinaryTreeNode root){
           if (root==null)
               return 0;
           Queue<BinaryTreeNode> q=new LinkedList<>();
           q.offer(root);
           q.offer(null);
           int max_width=0;
           int temp_width=0;
           while (!q.isEmpty()){
               BinaryTreeNode tmp=q.poll();
               if (tmp==null){
                   if (max_width<temp_width)
                       max_width=temp_width;
                   temp_width=0;
                   if (!q.isEmpty()){
                       q.offer(null);
                   }
               }else {
                   temp_width++;
                   if (tmp.left!=null)
                       q.offer(tmp.left);
                   if (tmp.right!=null)
                       q.offer(tmp.right);
               }
           }
            return max_width;
        }
        //q22 find level with max sum in a binary tree
        public int findLevelwithMaxSum(BinaryTreeNode root){
            int maxSum=0;
            int currentSum=0;
            if (root==null)
                return 0;
            Queue<BinaryTreeNode> q=new LinkedList<>();
            q.offer(root);
            q.offer(null);
            int sum=0;
            int tempsum=0;
            while (!q.isEmpty()){
                BinaryTreeNode curr=q.poll();
                if (curr!=null){
                    tempsum+=curr.data;
                    if (curr.left!=null)
                        q.add(curr.left);
                    if (curr.right!=null)
                        q.add(curr.right);
                }else {
                    if (sum<tempsum)
                        sum=tempsum;
                    tempsum=0;
                    if (!q.isEmpty()){
                        q.offer(null);
                    }
                }
            }
            return sum;
        }
        //given an binary tree find all its root to leaf paths
        
        
        
        
    }

        public static void main(String[] args) throws Exception {
//            BinaryTreeNode root = new BinaryTreeNode(3);
//            int arr[] = {1, 2, 3, 4, 5, 6, 7};
//            for (int y : arr) {
//                root.insert(root, y);
//
//            }
//            ArrayList<ArrayList<Integer>> res = root.levelOrderR(root);
//            for (ArrayList<Integer> al : res) {
//                if (al == null)
//                    System.out.println("~~~~~~~~~~~~~~~~");
//                else
//                    System.out.println(al);
//            }
//            BinaryTreeNode r1 = new BinaryTreeNode(3);
//            BinaryTreeNode r2 = new BinaryTreeNode(3);
//            r1.left = new BinaryTreeNode(4);
//            r1.right = new BinaryTreeNode(5);
//            r1.left.left = new BinaryTreeNode(1);
//            System.out.println(r1.maxDepth(r2) + "hola");
//            BinaryTreeNode bb1=new BinaryTreeNode(10);
//            bb1.left= new BinaryTreeNode(5);
//            bb1.right=new BinaryTreeNode(15);
//          bb1.right.right=new BinaryTreeNode(25);
//           bb1.right.right.right=new BinaryTreeNode(35);
//            bb1.right.right.right.left=new BinaryTreeNode(24);
//            bb1.right.right.right.right=new BinaryTreeNode(55);
//            bb1.right.right.right.right.right=new BinaryTreeNode(65);
//            System.out.println(bb1.DepthusingQueue(bb1));
            //del proc
//            BinaryTreeNode our_node=new BinaryTreeNode(1);
//            our_node.left=new BinaryTreeNode(2);
//            our_node.right=new BinaryTreeNode(3);
//            our_node.left.left=new BinaryTreeNode(4);
//            our_node.left.right=new BinaryTreeNode(5);
//            ArrayList<ArrayList<Integer>> al=our_node.levelOrder(our_node);
//            for (int i=0;i<al.size();++i){
//                System.out.println(al.get(i));
//                System.out.println("~~~~~~~~");
//            }
//                boolean bl=true;
//
//            bl=  our_node.deleteFromBT(our_node,1);
//
//                                              50
//                                  40                    60
//                            30         45                     62
//                        29                   46
//                     28                         47
//                   27                             48
//                 26                                  49
//            if (!bl){
//                System.out.println("WARNING DELETE OPERATION FAILED");
//            }
//            System.out.println("~~~~~~~DELETED~~1~~~");
//            al=our_node.levelOrder(our_node);
//            for (int i=0;i<al.size();++i){
//                System.out.println(al.get(i));
//                System.out.println("~~~~~~~~");
//            }
            BinaryTreeNode root=new BinaryTreeNode(50);
            root.right=new BinaryTreeNode(60);
            root.right.right=new BinaryTreeNode(62);
            root.left=new BinaryTreeNode(40);
            root.left.left=new BinaryTreeNode(30);
            root.left.left.left=new BinaryTreeNode(29);
            root.left.left.left.left=new BinaryTreeNode(28);
            root.left.left.left.left.left=new BinaryTreeNode(27);
            root.left.left.left.left.left.left=new BinaryTreeNode(26);
            root.left.right=new BinaryTreeNode(45);
            root.left.right.right=new BinaryTreeNode(46);
            root.left.right.right.right=new BinaryTreeNode(47);
            root.left.right.right.right.right=new BinaryTreeNode(48);
            root.left.right.right.right.right.right=new BinaryTreeNode(49);
           // System.out.println(root.diameter(root));
           // System.out.println(root.height(root));
            //System.out.println(root.width(root));
            System.out.println(root.findLevelwithMaxSum(root));

        }


}
